"use strict";

var _bodyParser = require("body-parser");

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _mongoose = require("mongoose");

var _mongoose2 = _interopRequireDefault(_mongoose);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _config = require("./config/config");

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PUBLIC_PATH = _path2.default.resolve(__dirname, "../public");

var app = (0, _express2.default)();

// Connect mongoose
_mongoose2.default.Promise = global.Promise;
_mongoose2.default.connect(_config2.default.mongo.uri, {
    useMongoClient: true,
    promiseLibrary: global.Promise
});

// Setup body-parser
app.use(_bodyParser2.default.urlencoded({ extended: true }));
app.use(_bodyParser2.default.json());

app.use(_express2.default.static(PUBLIC_PATH));

// Setup the routes
app.use("/", require("./routes"));

// Allow all URI's; handle by react router
app.get("*", function (req, res) {
    res.sendFile(_path2.default.join(PUBLIC_PATH, "/index.html"));
});

app.listen(_config2.default.port);

var date = new Date();
// Output the server listening message
console.log("-".repeat(50));
console.log("--- rssenal server listening on http://127.0.0.1:" + _config2.default.port);
console.log("--- " + date.toString());
console.log("-".repeat(50));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvc2VydmVyLmpzIl0sIm5hbWVzIjpbIlBVQkxJQ19QQVRIIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsImFwcCIsIlByb21pc2UiLCJnbG9iYWwiLCJjb25uZWN0IiwibW9uZ28iLCJ1cmkiLCJ1c2VNb25nb0NsaWVudCIsInByb21pc2VMaWJyYXJ5IiwidXNlIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwianNvbiIsInN0YXRpYyIsInJlcXVpcmUiLCJnZXQiLCJyZXEiLCJyZXMiLCJzZW5kRmlsZSIsImpvaW4iLCJsaXN0ZW4iLCJwb3J0IiwiZGF0ZSIsIkRhdGUiLCJjb25zb2xlIiwibG9nIiwicmVwZWF0IiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUEsSUFBTUEsY0FBYyxlQUFLQyxPQUFMLENBQWFDLFNBQWIsRUFBd0IsV0FBeEIsQ0FBcEI7O0FBRUEsSUFBTUMsTUFBTSx3QkFBWjs7QUFFQTtBQUNBLG1CQUFTQyxPQUFULEdBQW1CQyxPQUFPRCxPQUExQjtBQUNBLG1CQUFTRSxPQUFULENBQWlCLGlCQUFPQyxLQUFQLENBQWFDLEdBQTlCLEVBQW1DO0FBQy9CQyxvQkFBZ0IsSUFEZTtBQUUvQkMsb0JBQWdCTCxPQUFPRDtBQUZRLENBQW5DOztBQUtBO0FBQ0FELElBQUlRLEdBQUosQ0FBUSxxQkFBV0MsVUFBWCxDQUFzQixFQUFFQyxVQUFVLElBQVosRUFBdEIsQ0FBUjtBQUNBVixJQUFJUSxHQUFKLENBQVEscUJBQVdHLElBQVgsRUFBUjs7QUFFQVgsSUFBSVEsR0FBSixDQUFRLGtCQUFRSSxNQUFSLENBQWVmLFdBQWYsQ0FBUjs7QUFFQTtBQUNBRyxJQUFJUSxHQUFKLENBQVEsR0FBUixFQUFhSyxRQUFRLFVBQVIsQ0FBYjs7QUFFQTtBQUNBYixJQUFJYyxHQUFKLENBQVEsR0FBUixFQUFhLFVBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFjO0FBQ3ZCQSxRQUFJQyxRQUFKLENBQWEsZUFBS0MsSUFBTCxDQUFVckIsV0FBVixFQUF1QixhQUF2QixDQUFiO0FBQ0gsQ0FGRDs7QUFJQUcsSUFBSW1CLE1BQUosQ0FBVyxpQkFBT0MsSUFBbEI7O0FBRUEsSUFBTUMsT0FBTyxJQUFJQyxJQUFKLEVBQWI7QUFDQTtBQUNBQyxRQUFRQyxHQUFSLENBQVksSUFBSUMsTUFBSixDQUFXLEVBQVgsQ0FBWjtBQUNBRixRQUFRQyxHQUFSLHVEQUFnRSxpQkFBT0osSUFBdkU7QUFDQUcsUUFBUUMsR0FBUixVQUFtQkgsS0FBS0ssUUFBTCxFQUFuQjtBQUNBSCxRQUFRQyxHQUFSLENBQVksSUFBSUMsTUFBSixDQUFXLEVBQVgsQ0FBWiIsImZpbGUiOiJzZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5cbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5cbmltcG9ydCBDT05GSUcgZnJvbSBcIi4vY29uZmlnL2NvbmZpZ1wiO1xuXG5jb25zdCBQVUJMSUNfUEFUSCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi4vcHVibGljXCIpO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbi8vIENvbm5lY3QgbW9uZ29vc2Vcbm1vbmdvb3NlLlByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbm1vbmdvb3NlLmNvbm5lY3QoQ09ORklHLm1vbmdvLnVyaSwge1xuICAgIHVzZU1vbmdvQ2xpZW50OiB0cnVlLFxuICAgIHByb21pc2VMaWJyYXJ5OiBnbG9iYWwuUHJvbWlzZVxufSk7XG5cbi8vIFNldHVwIGJvZHktcGFyc2VyXG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKFBVQkxJQ19QQVRIKSk7XG5cbi8vIFNldHVwIHRoZSByb3V0ZXNcbmFwcC51c2UoXCIvXCIsIHJlcXVpcmUoXCIuL3JvdXRlc1wiKSk7XG5cbi8vIEFsbG93IGFsbCBVUkknczsgaGFuZGxlIGJ5IHJlYWN0IHJvdXRlclxuYXBwLmdldChcIipcIiwgKHJlcSwgcmVzKSA9PiB7XG4gICAgcmVzLnNlbmRGaWxlKHBhdGguam9pbihQVUJMSUNfUEFUSCwgXCIvaW5kZXguaHRtbFwiKSk7XG59KTtcblxuYXBwLmxpc3RlbihDT05GSUcucG9ydCk7XG5cbmNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuLy8gT3V0cHV0IHRoZSBzZXJ2ZXIgbGlzdGVuaW5nIG1lc3NhZ2VcbmNvbnNvbGUubG9nKFwiLVwiLnJlcGVhdCg1MCkpO1xuY29uc29sZS5sb2coYC0tLSByc3NlbmFsIHNlcnZlciBsaXN0ZW5pbmcgb24gaHR0cDovLzEyNy4wLjAuMToke0NPTkZJRy5wb3J0fWApO1xuY29uc29sZS5sb2coYC0tLSAke2RhdGUudG9TdHJpbmcoKX1gKTtcbmNvbnNvbGUubG9nKFwiLVwiLnJlcGVhdCg1MCkpO1xuIl19